// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED
// GENERATED USING KEYSPACE cqlc
// AT 2018-09-15 01:51:09.978716 -0700 PDT m=+0.075402320 USING cqlc VERSION 0.10.5
// AGAINST HOST ID 9e053a42-f26c-4cb8-af0d-af1c795d68f9 (SERVER VERSION 2.1.20)
// CLIENT NEGOTIATED CQL VERSION 3.0.0 (SERVER SUPPORTS UP TO 3.2.1)

package t1gen

import (
	"time"

	"github.com/relops/cqlc/cqlc"

	"github.com/gocql/gocql"

	"log"
)

const (
	CQLC_VERSION = "0.10.5"
)

type T1abcIdColumn struct {
}

func (b *T1abcIdColumn) ColumnName() string {
	return "id"
}

func (b *T1abcIdColumn) To(value *string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

func (b *T1abcIdColumn) Eq(value string) cqlc.Condition {
	column := &T1abcIdColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.EqPredicate}
}

func (b *T1abcIdColumn) PartitionBy() cqlc.Column {
	return b
}

func (b *T1abcIdColumn) In(value ...string) cqlc.Condition {
	column := &T1abcIdColumn{}
	binding := cqlc.ColumnBinding{Column: column, Value: value}
	return cqlc.Condition{Binding: binding, Predicate: cqlc.InPredicate}
}

type T1abcStringListColumn struct {
}

func (b *T1abcStringListColumn) ColumnName() string {
	return "string_list"
}

func (b *T1abcStringListColumn) ListType() cqlc.Column {
	return &T1abcStringListColumn{}
}

func (b *T1abcStringListColumn) To(value *[]string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type T1abcStringMapColumn struct {
}

func (b *T1abcStringMapColumn) ColumnName() string {
	return "string_map"
}

func (b *T1abcStringMapColumn) To(value *map[string]string) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type T1abcTsColumn struct {
}

func (b *T1abcTsColumn) ColumnName() string {
	return "ts"
}

func (b *T1abcTsColumn) To(value *time.Time) cqlc.ColumnBinding {
	return cqlc.ColumnBinding{Column: b, Value: value}
}

type T1abc struct {
	Id string

	StringList []string

	StringMap map[string]string

	Ts time.Time
}

func (s *T1abc) IdValue() string {
	return s.Id
}

func (s *T1abc) StringListValue() []string {
	return s.StringList
}

func (s *T1abc) StringMapValue() map[string]string {
	return s.StringMap
}

func (s *T1abc) TsValue() time.Time {
	return s.Ts
}

type T1abcDef struct {
	ID cqlc.LastPartitionedStringColumn

	STRING_LIST cqlc.StringSliceColumn

	STRING_MAP cqlc.StringStringMapColumn

	TS cqlc.TimestampColumn
}

func BindT1abc(iter *gocql.Iter) ([]T1abc, error) {
	array := make([]T1abc, 0)
	err := MapT1abc(iter, func(t T1abc) (bool, error) {
		array = append(array, t)
		return true, nil
	})
	return array, err
}

func MapT1abc(iter *gocql.Iter, callback func(t T1abc) (bool, error)) error {
	columns := iter.Columns()
	row := make([]interface{}, len(columns))

	for {
		t := T1abc{}

		for i := 0; i < len(columns); i++ {
			switch columns[i].Name {

			case "id":
				row[i] = &t.Id

			case "string_list":
				row[i] = &t.StringList

			case "string_map":
				row[i] = &t.StringMap

			case "ts":
				row[i] = &t.Ts

			default:
				log.Fatal("unhandled column: ", columns[i].Name)
			}
		}
		if !iter.Scan(row...) {
			break
		}

		readNext, err := callback(t)
		if err != nil {
			return err
		}
		if !readNext {
			return nil
		}
	}

	return nil
}

func (s *T1abcDef) SupportsUpsert() bool {
	return true
}

func (s *T1abcDef) TableName() string {
	return "t1abc"
}

func (s *T1abcDef) Keyspace() string {
	return "cqlc"
}

func (s *T1abcDef) Bind(v T1abc) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &T1abcIdColumn{}, Value: v.Id},

		cqlc.ColumnBinding{Column: &T1abcStringListColumn{}, Value: v.StringList},

		cqlc.ColumnBinding{Column: &T1abcStringMapColumn{}, Value: v.StringMap},

		cqlc.ColumnBinding{Column: &T1abcTsColumn{}, Value: v.Ts},
	}
	return cqlc.TableBinding{Table: &T1abcDef{}, Columns: cols}
}

func (s *T1abcDef) To(v *T1abc) cqlc.TableBinding {
	cols := []cqlc.ColumnBinding{

		cqlc.ColumnBinding{Column: &T1abcIdColumn{}, Value: &v.Id},

		cqlc.ColumnBinding{Column: &T1abcStringListColumn{}, Value: &v.StringList},

		cqlc.ColumnBinding{Column: &T1abcStringMapColumn{}, Value: &v.StringMap},

		cqlc.ColumnBinding{Column: &T1abcTsColumn{}, Value: &v.Ts},
	}
	return cqlc.TableBinding{Table: &T1abcDef{}, Columns: cols}
}

func (s *T1abcDef) ColumnDefinitions() []cqlc.Column {
	return []cqlc.Column{

		&T1abcIdColumn{},

		&T1abcStringListColumn{},

		&T1abcStringMapColumn{},

		&T1abcTsColumn{},
	}
}

func T1abcTableDef() *T1abcDef {
	return &T1abcDef{

		ID: &T1abcIdColumn{},

		STRING_LIST: &T1abcStringListColumn{},

		STRING_MAP: &T1abcStringMapColumn{},

		TS: &T1abcTsColumn{},
	}
}

var T1ABC = T1abcTableDef()

func (s *T1abcDef) IdColumn() cqlc.LastPartitionedStringColumn {
	return &T1abcIdColumn{}
}

func (s *T1abcDef) StringListColumn() cqlc.StringSliceColumn {
	return &T1abcStringListColumn{}
}

func (s *T1abcDef) StringMapColumn() cqlc.StringStringMapColumn {
	return &T1abcStringMapColumn{}
}

func (s *T1abcDef) TsColumn() cqlc.TimestampColumn {
	return &T1abcTsColumn{}
}
